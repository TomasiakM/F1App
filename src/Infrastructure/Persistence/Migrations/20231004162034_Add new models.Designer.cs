// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231004162034_Add new models")]
    partial class Addnewmodels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aggregates.Articles.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Drivers.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Drivers", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.RaceWeeks.RaceWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("Slug", "SeasonId")
                        .IsUnique();

                    b.HasIndex("TrackId", "SeasonId")
                        .IsUnique();

                    b.ToTable("RaceWeeks", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("208b035e-c096-43c1-a05e-98e458573016"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("2c8a29a3-f4e6-4b4c-860f-bfde6c949b0d"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Aggregates.Seasons.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("Seasons", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Teams.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Tracks.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Domain.Aggregates.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Articles.Article", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Articles.Entities.Like", "Likes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ArticleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("ArticleId");

                            b1.ToTable("Likes", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ArticleId");
                        });

                    b.OwnsMany("Domain.Aggregates.Tags.ValueObjects.TagId", "TagIds", b1 =>
                        {
                            b1.Property<Guid>("ArticleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TagId");

                            b1.HasKey("ArticleId", "Id");

                            b1.ToTable("Article_Tag", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ArticleId");
                        });

                    b.Navigation("Likes");

                    b.Navigation("TagIds");
                });

            modelBuilder.Entity("Domain.Aggregates.Comments.Comment", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Comments.Entities.Reply", "Replies", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CommentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("CommentId");

                            b1.ToTable("Replies", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CommentId");
                        });

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Aggregates.RaceWeeks.RaceWeek", b =>
                {
                    b.HasOne("Domain.Aggregates.Seasons.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Tracks.Track", null)
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Aggregates.RaceWeeks.Entities.Session<Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.FP1Result>", "FP1", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("RaceWeekId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("Id");

                            b1.HasIndex("RaceWeekId")
                                .IsUnique();

                            b1.ToTable("FP1", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RaceWeekId");

                            b1.OwnsMany("Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.FP1Result", "SessionResults", b2 =>
                                {
                                    b2.Property<int>("SessionId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid>("DriverId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan?>("FastestLap")
                                        .HasColumnType("time");

                                    b2.Property<int>("Laps")
                                        .HasColumnType("int");

                                    b2.Property<int>("Place")
                                        .HasColumnType("int");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("SessionId", "Id");

                                    b2.HasIndex("DriverId");

                                    b2.HasIndex("TeamId");

                                    b2.ToTable("FP1Results", (string)null);

                                    b2.HasOne("Domain.Aggregates.Drivers.Driver", null)
                                        .WithMany()
                                        .HasForeignKey("DriverId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("SessionId");

                                    b2.HasOne("Domain.Aggregates.Teams.Team", null)
                                        .WithMany()
                                        .HasForeignKey("TeamId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();
                                });

                            b1.Navigation("SessionResults");
                        });

                    b.OwnsOne("Domain.Aggregates.RaceWeeks.Entities.Session<Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.FP2Result>", "FP2", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("RaceWeekId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("Id");

                            b1.HasIndex("RaceWeekId")
                                .IsUnique();

                            b1.ToTable("FP2", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RaceWeekId");

                            b1.OwnsMany("Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.FP2Result", "SessionResults", b2 =>
                                {
                                    b2.Property<int>("SessionId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid>("DriverId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan?>("FastestLap")
                                        .HasColumnType("time");

                                    b2.Property<int>("Laps")
                                        .HasColumnType("int");

                                    b2.Property<int>("Place")
                                        .HasColumnType("int");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("SessionId", "Id");

                                    b2.HasIndex("DriverId");

                                    b2.HasIndex("TeamId");

                                    b2.ToTable("FP2Results", (string)null);

                                    b2.HasOne("Domain.Aggregates.Drivers.Driver", null)
                                        .WithMany()
                                        .HasForeignKey("DriverId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("SessionId");

                                    b2.HasOne("Domain.Aggregates.Teams.Team", null)
                                        .WithMany()
                                        .HasForeignKey("TeamId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();
                                });

                            b1.Navigation("SessionResults");
                        });

                    b.OwnsOne("Domain.Aggregates.RaceWeeks.Entities.Session<Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.FP3Result>", "FP3", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("RaceWeekId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("Id");

                            b1.HasIndex("RaceWeekId")
                                .IsUnique();

                            b1.ToTable("FP3", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RaceWeekId");

                            b1.OwnsMany("Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.FP3Result", "SessionResults", b2 =>
                                {
                                    b2.Property<int>("SessionId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid>("DriverId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan?>("FastestLap")
                                        .HasColumnType("time");

                                    b2.Property<int>("Laps")
                                        .HasColumnType("int");

                                    b2.Property<int>("Place")
                                        .HasColumnType("int");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("SessionId", "Id");

                                    b2.HasIndex("DriverId");

                                    b2.HasIndex("TeamId");

                                    b2.ToTable("FP3Results", (string)null);

                                    b2.HasOne("Domain.Aggregates.Drivers.Driver", null)
                                        .WithMany()
                                        .HasForeignKey("DriverId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("SessionId");

                                    b2.HasOne("Domain.Aggregates.Teams.Team", null)
                                        .WithMany()
                                        .HasForeignKey("TeamId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();
                                });

                            b1.Navigation("SessionResults");
                        });

                    b.OwnsOne("Domain.Aggregates.RaceWeeks.Entities.Session<Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.RaceQualificationResult>", "RaceQualifications", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("RaceWeekId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("Id");

                            b1.HasIndex("RaceWeekId")
                                .IsUnique();

                            b1.ToTable("RaceQualifications", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RaceWeekId");

                            b1.OwnsMany("Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.RaceQualificationResult", "SessionResults", b2 =>
                                {
                                    b2.Property<int>("SessionId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid>("DriverId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Place")
                                        .HasColumnType("int");

                                    b2.Property<TimeSpan?>("Q1Time")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan?>("Q2Time")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan?>("Q3Time")
                                        .HasColumnType("time");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("SessionId", "Id");

                                    b2.HasIndex("DriverId");

                                    b2.HasIndex("TeamId");

                                    b2.ToTable("RaceQualificationsResults", (string)null);

                                    b2.HasOne("Domain.Aggregates.Drivers.Driver", null)
                                        .WithMany()
                                        .HasForeignKey("DriverId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("SessionId");

                                    b2.HasOne("Domain.Aggregates.Teams.Team", null)
                                        .WithMany()
                                        .HasForeignKey("TeamId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();
                                });

                            b1.Navigation("SessionResults");
                        });

                    b.OwnsOne("Domain.Aggregates.RaceWeeks.Entities.Session<Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.RaceResult>", "Race", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("RaceWeekId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("Id");

                            b1.HasIndex("RaceWeekId")
                                .IsUnique();

                            b1.ToTable("Races", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RaceWeekId");

                            b1.OwnsMany("Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.RaceResult", "SessionResults", b2 =>
                                {
                                    b2.Property<int>("SessionId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid>("DriverId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan?>("FastestLap")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan?>("FinishTime")
                                        .HasColumnType("time");

                                    b2.Property<int>("FinishType")
                                        .HasColumnType("int");

                                    b2.Property<int>("Laps")
                                        .HasColumnType("int");

                                    b2.Property<int>("Place")
                                        .HasColumnType("int");

                                    b2.Property<float>("Points")
                                        .HasColumnType("real");

                                    b2.Property<int>("StartPosition")
                                        .HasColumnType("int");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("SessionId", "Id");

                                    b2.HasIndex("DriverId");

                                    b2.HasIndex("TeamId");

                                    b2.ToTable("RaceResults", (string)null);

                                    b2.HasOne("Domain.Aggregates.Drivers.Driver", null)
                                        .WithMany()
                                        .HasForeignKey("DriverId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("SessionId");

                                    b2.HasOne("Domain.Aggregates.Teams.Team", null)
                                        .WithMany()
                                        .HasForeignKey("TeamId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();
                                });

                            b1.Navigation("SessionResults");
                        });

                    b.OwnsOne("Domain.Aggregates.RaceWeeks.Entities.Session<Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.SprintQualificationResult>", "SprintQualifications", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("RaceWeekId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("Id");

                            b1.HasIndex("RaceWeekId")
                                .IsUnique();

                            b1.ToTable("SprintQualifications", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RaceWeekId");

                            b1.OwnsMany("Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.SprintQualificationResult", "SessionResults", b2 =>
                                {
                                    b2.Property<int>("SessionId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid>("DriverId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Place")
                                        .HasColumnType("int");

                                    b2.Property<TimeSpan?>("Q1Time")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan?>("Q2Time")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan?>("Q3Time")
                                        .HasColumnType("time");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("SessionId", "Id");

                                    b2.HasIndex("DriverId");

                                    b2.HasIndex("TeamId");

                                    b2.ToTable("SprintQualificationResults", (string)null);

                                    b2.HasOne("Domain.Aggregates.Drivers.Driver", null)
                                        .WithMany()
                                        .HasForeignKey("DriverId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("SessionId");

                                    b2.HasOne("Domain.Aggregates.Teams.Team", null)
                                        .WithMany()
                                        .HasForeignKey("TeamId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();
                                });

                            b1.Navigation("SessionResults");
                        });

                    b.OwnsOne("Domain.Aggregates.RaceWeeks.Entities.Session<Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.SprintResult>", "Sprint", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("RaceWeekId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("Id");

                            b1.HasIndex("RaceWeekId")
                                .IsUnique();

                            b1.ToTable("Sprints", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RaceWeekId");

                            b1.OwnsMany("Domain.Aggregates.RaceWeeks.ValueObjects.SessionResults.SprintResult", "SessionResults", b2 =>
                                {
                                    b2.Property<int>("SessionId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid>("DriverId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan?>("FastestLap")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan?>("FinishTime")
                                        .HasColumnType("time");

                                    b2.Property<int>("FinishType")
                                        .HasColumnType("int");

                                    b2.Property<int>("Laps")
                                        .HasColumnType("int");

                                    b2.Property<int>("Place")
                                        .HasColumnType("int");

                                    b2.Property<float>("Points")
                                        .HasColumnType("real");

                                    b2.Property<int>("StartPosition")
                                        .HasColumnType("int");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("SessionId", "Id");

                                    b2.HasIndex("DriverId");

                                    b2.HasIndex("TeamId");

                                    b2.ToTable("SprintResults", (string)null);

                                    b2.HasOne("Domain.Aggregates.Drivers.Driver", null)
                                        .WithMany()
                                        .HasForeignKey("DriverId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("SessionId");

                                    b2.HasOne("Domain.Aggregates.Teams.Team", null)
                                        .WithMany()
                                        .HasForeignKey("TeamId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();
                                });

                            b1.Navigation("SessionResults");
                        });

                    b.Navigation("FP1");

                    b.Navigation("FP2");

                    b.Navigation("FP3");

                    b.Navigation("Race");

                    b.Navigation("RaceQualifications");

                    b.Navigation("Sprint");

                    b.Navigation("SprintQualifications");
                });

            modelBuilder.Entity("Domain.Aggregates.Users.User", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Roles.ValueObjects.RoleId", "RoleIds", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RoleId");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("User_Role", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("Domain.Aggregates.Users.ValueObjects.Ban", "Bans", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTimeOffset>("End")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("Bans", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Bans");

                    b.Navigation("RoleIds");
                });
#pragma warning restore 612, 618
        }
    }
}
